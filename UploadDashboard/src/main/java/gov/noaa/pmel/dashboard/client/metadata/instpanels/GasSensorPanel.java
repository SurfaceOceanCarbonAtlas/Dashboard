package gov.noaa.pmel.dashboard.client.metadata.instpanels;

import com.google.gwt.core.client.GWT;
import com.google.gwt.safehtml.shared.SafeHtml;
import com.google.gwt.safehtml.shared.SafeHtmlUtils;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.TabLayoutPanel;
import gov.noaa.pmel.dashboard.client.UploadDashboard;
import gov.noaa.pmel.socatmetadata.shared.instrument.CalibrationGas;
import gov.noaa.pmel.socatmetadata.shared.instrument.GasSensor;

import java.util.ArrayList;
import java.util.HashSet;


public class GasSensorPanel extends GenericSensorPanel {

    interface GasSensorPanelUiBinder extends UiBinder<ScrollPanel,GasSensorPanel> {
    }

    private static final GasSensorPanelUiBinder uiBinder = GWT.create(GasSensorPanelUiBinder.class);

    @UiField
    HTML gasesHtml;
    @UiField
    TabLayoutPanel gasesTabPanel;

    private final ArrayList<CalibrationGasPanel> gasPanels;
    private final SafeHtml validValueHtml;
    private final SafeHtml invalidValueHtml;

    /**
     * Creates a FlowPanel associated with the given gas sensor metadata
     * The {@link #initialize()} method must be called prior to using this FlowPanel.
     *
     * @param instr
     *         associate this panel with this sensor; cannot be null
     * @param header
     *         header that should be updated when appropriate values change; cannot be null
     * @param parentPanel
     *         parent TabPanel controlling this panel
     */
    public GasSensorPanel(GasSensor instr, HTML header, InstrumentsTabPanel parentPanel) {
        super(instr, header, parentPanel);
        // gasesHtml and gasesTabPanel generated by uiBinder.createAndBindUi
        gasPanels = new ArrayList<CalibrationGasPanel>();
        validValueHtml = SafeHtmlUtils.fromSafeConstant("Calibration gases:");
        invalidValueHtml = UploadDashboard.invalidLabelHtml(validValueHtml);
    }

    @Override
    public void initialize() {
        initWidget(uiBinder.createAndBindUi(this));
        finishInitialization();
    }

    @Override
    protected void finishInitialization() {
        GasSensor sensor = (GasSensor) instr;

        ArrayList<CalibrationGas> calibrationGases = sensor.getCalibrationGases();
        if ( calibrationGases.isEmpty() )
            calibrationGases.add(new CalibrationGas(null, "CO2", null, null, null, null));
        for (CalibrationGas gas : calibrationGases) {
            HTML header = new HTML();
            CalibrationGasPanel panel = new CalibrationGasPanel(gas, header, this);
            gasPanels.add(panel);
            gasesTabPanel.add(panel, header);
        }
        gasesTabPanel.selectTab(0, true);

        // The calibration gas panels deal with events and then call the duplicatePanel, removePanel,
        // and updateCalibrationGases methods

        // Finish initialization, including marking invalid fields
        super.finishInitialization();
    }

    /**
     * Create a new calibration gas and associated panel from the calibration gas of the given panel
     * and add immediately after the given panel
     *
     * @param panel
     *         calibration gas panel to duplicate
     */
    public void duplicatePanel(CalibrationGasPanel panel) {
        int index = gasPanels.indexOf(panel);
        if ( index < 0 ) {
            UploadDashboard.showMessage("Unexpected invalid panel to duplicate");
            return;
        }
        CalibrationGas gas = (CalibrationGas) (panel.getUpdatedCalibrationGas().duplicate(null));
        gas.setId(null);
        HTML header = new HTML();
        CalibrationGasPanel newPanel = new CalibrationGasPanel(gas, header, this);
        index++;
        gasPanels.add(index, newPanel);
        gasesTabPanel.insert(newPanel, header, index);
        gasesTabPanel.selectTab(index, true);
        updateCalibrationGases();
    }

    /**
     * @param panel
     *         remove this panel and its associated calibration gas
     */
    public void removePanel(CalibrationGasPanel panel) {
        int numPanels = gasPanels.size();
        if ( numPanels < 2 ) {
            UploadDashboard.showMessage("There must be at least one calibration gas");
            return;
        }
        int index = gasPanels.indexOf(panel);
        if ( (index < 0) || (index >= numPanels) )
            return;
        gasPanels.remove(index);
        gasesTabPanel.remove(index);
        numPanels--;
        if ( index == numPanels )
            index--;
        gasesTabPanel.selectTab(index, true);
        updateCalibrationGases();
    }

    /**
     * Update the calibration gases associated with this gas sensor.
     */
    public void updateCalibrationGases() {
        GasSensor sensor = (GasSensor) instr;

        ArrayList<CalibrationGas> gases = new ArrayList<CalibrationGas>(gasPanels.size());
        for (CalibrationGasPanel panel : gasPanels) {
            gases.add(panel.getUpdatedCalibrationGas());
        }
        sensor.setCalibrationGases(gases);
        markInvalids(null);
    }

    @Override
    protected void markInvalids(HashSet<String> invalids) {
        if ( invalids == null )
            invalids = ((GasSensor) instr).invalidFieldNames();

        if ( invalids.isEmpty() )
            gasesHtml.setHTML(validValueHtml);
        else
            gasesHtml.setHTML(invalidValueHtml);

        // Finish marking labels and the tab for this panel
        super.markInvalids(invalids);
    }

}
