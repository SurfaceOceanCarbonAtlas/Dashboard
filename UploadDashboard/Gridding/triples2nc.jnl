! triples2nc
! from Hankin's triples2nc.jnl
! Run using double-precision Ferret

! convert the ASCII file of SOCAT triples written by the database
! into a netCDF file

! the format of the data that this script is designed to handle is 

!data_id latitude        longitude       datetime        expocode        fCO2rec
!1       -39.632000      -60.809998      1986-06-27 16:42:00     06AQ19860627    319.063988
!2       -39.700001      -60.677002      1986-06-27 17:12:00     06AQ19860627    317.875346
!3       -39.768002      -60.542999      1986-06-27 17:42:00     06AQ19860627    322.844617


! Alert: Before running this script use the wc command to make sure that
! maxobs is larger than the size of the file 

! 31 May 2016
!wc --lines  /home/users/ksmith/socat5_abcd_woce2_data.tsv
!21484306

! minus 1 for the header line
define symbol nobs = 21484305


! This file with Cruise Flags A-D only, WOCE-flag 2
! 

define symbol infile = /home/data/socat/v2020/SOCATv2020All_ABCD_W2_data.tsv
define symbol outfile = /home/data/socat/v2020/SOCAT_triples_v2020_fco2.nc

! Get the number of obs directly

let num = {spawn:'wc --lines ($infile)'}
define symbol wc = `num`
let len = `strindex ("($wc)", "($infile)")` - 1

define symbol nobs = `substring("($wc)", 1, len)`

! minus 1 for header line
define symbol nobs =`($nobs)-1`

! test
pause

set memory/size=600   ! Need > 400 to load all the data at once from ascii
can mode upcase

define axis/x=1:($nobs):1 xobs
define grid/x=xobs gobs
cancel data/all

! now set Ferret up to read the data for real
columns/skip=1/grid=gobs/\
var="data_id,lat,lon,day,time,cruise_id,fco2_rec,sst,salinity"/\
type="numeric,latitude,longitude,eurodate,time,text,numeric,numeric,numeric"/delim="\t,\b,\," ($infile)

! determine the day number with the proper offset
let offset1970 = DAYS1900(1970,1,1)
let day1970 = day - offset1970
let date = day1970 + time/24
set variable/units="Days since 1970-01-01" date

define axis/t=`date[i=@min],prec=10`:`date[i=@max],prec=10`:1/t0=01-JAN-1970/units=days tax 
sh axis tax; pause

sh dat 
sh var

! compute a cruise sequence number using @EVNT (takes 7 seconds)

let mask = cruise_id ne cruise_id[i=@shf:-1]
let mask_missing = IGNORE0(mask)
let/title="Cruise no." cruise_no = mask_missing[i=@evnt:1]

show data

go add_global_attribute ($outfile)


! reading and saving takes about 1.5 minute for v2020

message ready to write data to ($outfile) ?

set var/outtype=float/units="degrees_north" lat
set var/outtype=float/units="degrees_east" lon
set var/outtype=float/units="uatm" fco2_rec
set var/bad=-999/outtype=float/units="degrees C" sst
set var/bad=-999/outtype=float/units="PSU" salinity

sp date
save/append/file="($outfile)" lat,lon,date,data_id,cruise_id,cruise_no,fco2_rec,sst,salinity
sp date

! Write a mask variable: if etopo1 > 0 then mask out data
! THIS IS NOT USED and it takes forever. Skip it.
EXIT/SCRIPT

can data/all
can var/all
use "($outfile)"
use etopo1

let topo_elev = samplexy(rose[d=2], lon[d=1], lat[d=1])
let/bad=999 mask_land = if topo_elev LE 0 then 1 else 0
save/outtype=int/append/file="($outfile)" mask_land
