package uk.ac.uea.socat.sanitychecker.config;

import org.apache.log4j.Logger;

import uk.ac.uea.socat.sanitychecker.metadata.MetadataItem;

/**
 * This class represents a single entry in the metadata configuration for the Sanity Checker.
 *
 */
public class MetadataConfigItem {

	/**
	 * The name of the metadata configuration item, as used in the header
	 * of SOCAT data submission files.
	 */
	private String itsName;
		
	/**
	 * Indicates whether or not this metadata item is generated automatically by the Sanity Checker.
	 * If the Sanity Checker is to generate the value, anything supplied in the header will be ignored
	 * and a warning generated.
	 */
	private boolean itMustGenerate;
	
	/**
	 * Indicates whether or not this metadata item is required
	 */
	private boolean itIsRequired;
	
	/**
	 * The class to be used when constructing a Metadata item of this type
	 */
	private Class<? extends MetadataItem> itsItemClass;
	
	/**
	 * The parameter to be passed to the generator function
	 */
	private String itsGeneratorParameter;
	
	/**
	 * Constructor for the metadata configuration object
	 */
	public MetadataConfigItem(String name, boolean required, boolean generate,
			Class<? extends MetadataItem> itemClass,
			String generatorParameter, Logger logger) throws SocatConfigException {
		
		logger.trace("Creating Metadata Config Item " + name);
		
		itsName = name;
		itIsRequired = required;
		itMustGenerate = generate;
		itsItemClass = itemClass;
		itsGeneratorParameter = generatorParameter;
	}
	
	/**
	 * Returns the name of this metadata item as it should appear in the data file
	 * @return The name of this metadata item
	 */
	public String getName() {
		return itsName;
	}
	
	/**
	 * Indicates whether or not this metadata item is required
	 * @return {@code true} if the metadata item is required; {@code false} otherwise
	 */
	public boolean isRequired() {
		return itIsRequired;
	}
	
	/**
	 * Indicates whether or not the Sanity Checker must generate the metadata value itself. 
	 * @return {@code true} if the Sanity Checker will generate the value; {@code false} otherwise.
	 */
	public boolean autoGenerated() {
		return itMustGenerate;
	}
	
	/**
	 * Returns the class to be used for the metadata item.
	 * @return The class to be used for the metadata item
	 */
	public Class<? extends MetadataItem> getItemClass() {
		return itsItemClass;
	}
	
	/**
	 * Returns the value to be passed to the metadata item's generator function.
	 * This only has meaning if {@code autoGenerated()) returns {@code true}.
	 * @return The value to be passed to the generator function.
	 */
	public String getGeneratorParameter() {
		return itsGeneratorParameter;
	}
	
	
	/**
	 * See if two configuration objects refer to the same metadata item.
	 * This is done by checking the name only. The passed in object can be either
	 * a {@code String} or another {@code MetadataConfigItem} object.
	 */
	@Override
	public boolean equals(Object obj) {
		boolean result = false;
		
		if (obj instanceof String) {
			result = ((String) obj).equals(itsName);
		} else if (obj instanceof MetadataConfigItem) {
			result = ((MetadataConfigItem) obj).getName().equals(itsName);
		}
		
		return result;
	}
}
